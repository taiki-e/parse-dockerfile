{
  "parser_directives": {
    "syntax": null,
    "escape": {
      "start": 2,
      "value": {
        "span": {
          "start": 9,
          "end": 10
        },
        "value": "`"
      }
    },
    "check": null
  },
  "instructions": [
    {
      "kind": "ARG",
      "arg": {
        "span": {
          "start": 7156,
          "end": 7159
        }
      },
      "arguments": {
        "span": {
          "start": 7160,
          "end": 7215
        },
        "value": "WINDOWS_BASE_IMAGE=mcr.microsoft.com/windows/servercore"
      }
    },
    {
      "kind": "ARG",
      "arg": {
        "span": {
          "start": 7216,
          "end": 7219
        }
      },
      "arguments": {
        "span": {
          "start": 7220,
          "end": 7251
        },
        "value": "WINDOWS_BASE_IMAGE_TAG=ltsc2022"
      }
    },
    {
      "kind": "FROM",
      "from": {
        "span": {
          "start": 7252,
          "end": 7256
        }
      },
      "options": [],
      "image": {
        "span": {
          "start": 7257,
          "end": 7304
        },
        "value": "${WINDOWS_BASE_IMAGE}:${WINDOWS_BASE_IMAGE_TAG}"
      },
      "as_": null
    },
    {
      "kind": "SHELL",
      "shell": {
        "span": {
          "start": 7344,
          "end": 7349
        }
      },
      "arguments": [
        {
          "span": {
            "start": 7352,
            "end": 7362
          },
          "value": "powershell"
        },
        {
          "span": {
            "start": 7366,
            "end": 7374
          },
          "value": "-Command"
        },
        {
          "span": {
            "start": 7378,
            "end": 7452
          },
          "value": "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"
        }
      ]
    },
    {
      "kind": "ARG",
      "arg": {
        "span": {
          "start": 7456,
          "end": 7459
        }
      },
      "arguments": {
        "span": {
          "start": 7460,
          "end": 7477
        },
        "value": "GO_VERSION=1.23.5"
      }
    },
    {
      "kind": "ARG",
      "arg": {
        "span": {
          "start": 7478,
          "end": 7481
        }
      },
      "arguments": {
        "span": {
          "start": 7482,
          "end": 7506
        },
        "value": "GOTESTSUM_VERSION=v1.8.2"
      }
    },
    {
      "kind": "ARG",
      "arg": {
        "span": {
          "start": 7507,
          "end": 7510
        }
      },
      "arguments": {
        "span": {
          "start": 7511,
          "end": 7534
        },
        "value": "GOWINRES_VERSION=v0.3.1"
      }
    },
    {
      "kind": "ARG",
      "arg": {
        "span": {
          "start": 7535,
          "end": 7538
        }
      },
      "arguments": {
        "span": {
          "start": 7539,
          "end": 7565
        },
        "value": "CONTAINERD_VERSION=v1.7.25"
      }
    },
    {
      "kind": "ENV",
      "env": {
        "span": {
          "start": 7850,
          "end": 7853
        }
      },
      "arguments": {
        "span": {
          "start": 7854,
          "end": 8131
        },
        "value": "GO_VERSION=${GO_VERSION}     CONTAINERD_VERSION=${CONTAINERD_VERSION}     GIT_VERSION=2.11.1     GOPATH=C:\\gopath     GO111MODULE=off     GOTOOLCHAIN=local     FROM_DOCKERFILE=1     GOTESTSUM_VERSION=${GOTESTSUM_VERSION}     GOWINRES_VERSION=${GOWINRES_VERSION}"
      }
    },
    {
      "kind": "RUN",
      "run": {
        "span": {
          "start": 8133,
          "end": 8136
        }
      },
      "options": [],
      "arguments": {
        "shell": {
          "span": {
            "start": 8141,
            "end": 12439
          },
          "value": "Function Test-Nano() { `\n    $EditionId = (Get-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion' -Name 'EditionID').EditionId; `\n    return (($EditionId -eq 'ServerStandardNano') -or ($EditionId -eq 'ServerDataCenterNano') -or ($EditionId -eq 'NanoServer')); `\n  }`\n  `\n  Function Download-File([string] $source, [string] $target) { `\n    if (Test-Nano) { `\n      $handler = New-Object System.Net.Http.HttpClientHandler; `\n      $client = New-Object System.Net.Http.HttpClient($handler); `\n      $client.Timeout = New-Object System.TimeSpan(0, 30, 0); `\n      $cancelTokenSource = [System.Threading.CancellationTokenSource]::new(); `\n      $responseMsg = $client.GetAsync([System.Uri]::new($source), $cancelTokenSource.Token); `\n      $responseMsg.Wait(); `\n      if (!$responseMsg.IsCanceled) { `\n        $response = $responseMsg.Result; `\n        if ($response.IsSuccessStatusCode) { `\n          $downloadedFileStream = [System.IO.FileStream]::new($target, [System.IO.FileMode]::Create, [System.IO.FileAccess]::Write); `\n          $copyStreamOp = $response.Content.CopyToAsync($downloadedFileStream); `\n          $copyStreamOp.Wait(); `\n          $downloadedFileStream.Close(); `\n          if ($copyStreamOp.Exception -ne $null) { throw $copyStreamOp.Exception } `\n        } `\n      } else { `\n      Throw (\"Failed to download \" + $source) `\n      }`\n    } else { `\n      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; `\n      $webClient = New-Object System.Net.WebClient; `\n      $webClient.DownloadFile($source, $target); `\n    } `\n  } `\n  `\n  setx /M PATH $('C:\\git\\cmd;C:\\git\\usr\\bin;'+$Env:PATH+';C:\\gcc\\bin;C:\\go\\bin;C:\\containerd\\bin'); `\n  `\n  Write-Host INFO: Downloading git...; `\n  $location='https://www.nuget.org/api/v2/package/GitForWindows/'+$Env:GIT_VERSION; `\n  Download-File $location C:\\gitsetup.zip; `\n  `\n  Write-Host INFO: Downloading go...; `\n  $dlGoVersion=$Env:GO_VERSION; `\n  Download-File \"https://go.dev/dl/go${dlGoVersion}.windows-amd64.zip\" C:\\go.zip; `\n  `\n  Write-Host INFO: Downloading compiler 1 of 3...; `\n  Download-File https://raw.githubusercontent.com/moby/docker-tdmgcc/master/gcc.zip C:\\gcc.zip; `\n  `\n  Write-Host INFO: Downloading compiler 2 of 3...; `\n  Download-File https://raw.githubusercontent.com/moby/docker-tdmgcc/master/runtime.zip C:\\runtime.zip; `\n  `\n  Write-Host INFO: Downloading compiler 3 of 3...; `\n  Download-File https://raw.githubusercontent.com/moby/docker-tdmgcc/master/binutils.zip C:\\binutils.zip; `\n  `\n  Write-Host INFO: Extracting git...; `\n  Expand-Archive C:\\gitsetup.zip C:\\git-tmp; `\n  New-Item -Type Directory C:\\git | Out-Null; `\n  Move-Item C:\\git-tmp\\tools\\* C:\\git\\.; `\n  Remove-Item -Recurse -Force C:\\git-tmp; `\n  `\n  Write-Host INFO: Expanding go...; `\n  Expand-Archive C:\\go.zip -DestinationPath C:\\; `\n  `\n  Write-Host INFO: Expanding compiler 1 of 3...; `\n  Expand-Archive C:\\gcc.zip -DestinationPath C:\\gcc -Force; `\n  Write-Host INFO: Expanding compiler 2 of 3...; `\n  Expand-Archive C:\\runtime.zip -DestinationPath C:\\gcc -Force; `\n  Write-Host INFO: Expanding compiler 3 of 3...; `\n  Expand-Archive C:\\binutils.zip -DestinationPath C:\\gcc -Force; `\n  `\n  Write-Host INFO: Removing downloaded files...; `\n  Remove-Item C:\\gcc.zip; `\n  Remove-Item C:\\runtime.zip; `\n  Remove-Item C:\\binutils.zip; `\n  Remove-Item C:\\gitsetup.zip; `\n  `\n  Write-Host INFO: Downloading containerd; `\n  Install-Package -Force 7Zip4PowerShell; `\n  $location='https://github.com/containerd/containerd/releases/download/'+$Env:CONTAINERD_VERSION+'/containerd-'+$Env:CONTAINERD_VERSION.TrimStart('v')+'-windows-amd64.tar.gz'; `\n  Download-File $location C:\\containerd.tar.gz; `\n  New-Item -Path C:\\containerd -ItemType Directory; `\n  Expand-7Zip C:\\containerd.tar.gz C:\\; `\n  Expand-7Zip C:\\containerd.tar C:\\containerd; `\n  Remove-Item C:\\containerd.tar.gz; `\n  Remove-Item C:\\containerd.tar; `\n  `\n  # Ensure all directories exist that we will require below....\n  $srcDir = \"\"\"$Env:GOPATH`\\src\\github.com\\docker\\docker\\bundles\"\"\"; `\n  Write-Host INFO: Ensuring existence of directory $srcDir...; `\n  New-Item -Force -ItemType Directory -Path $srcDir | Out-Null; `\n  `\n  Write-Host INFO: Configuring git core.autocrlf...; `\n  C:\\git\\cmd\\git config --global core.autocrlf true;"
        }
      },
      "here_docs": []
    },
    {
      "kind": "RUN",
      "run": {
        "span": {
          "start": 12441,
          "end": 12444
        }
      },
      "options": [],
      "arguments": {
        "shell": {
          "span": {
            "start": 12449,
            "end": 12941
          },
          "value": "Function Install-GoTestSum() { `\n    $Env:GO111MODULE = 'on'; `\n    $tmpGobin = \"${Env:GOBIN_TMP}\"; `\n    $Env:GOBIN = \"\"\"${Env:GOPATH}`\\bin\"\"\"; `\n    Write-Host \"INFO: Installing gotestsum version $Env:GOTESTSUM_VERSION in $Env:GOBIN\"; `\n    &go install \"gotest.tools/gotestsum@${Env:GOTESTSUM_VERSION}\"; `\n    $Env:GOBIN = \"${tmpGobin}\"; `\n    $Env:GO111MODULE = 'off'; `\n    if ($LASTEXITCODE -ne 0) {  `\n      Throw '\"gotestsum install failed...\"'; `\n    } `\n  } `\n  `\n  Install-GoTestSum"
        }
      },
      "here_docs": []
    },
    {
      "kind": "RUN",
      "run": {
        "span": {
          "start": 12943,
          "end": 12946
        }
      },
      "options": [],
      "arguments": {
        "shell": {
          "span": {
            "start": 12951,
            "end": 13444
          },
          "value": "Function Install-GoWinres() { `\n    $Env:GO111MODULE = 'on'; `\n    $tmpGobin = \"${Env:GOBIN_TMP}\"; `\n    $Env:GOBIN = \"\"\"${Env:GOPATH}`\\bin\"\"\"; `\n    Write-Host \"INFO: Installing go-winres version $Env:GOWINRES_VERSION in $Env:GOBIN\"; `\n    &go install \"github.com/tc-hib/go-winres@${Env:GOWINRES_VERSION}\"; `\n    $Env:GOBIN = \"${tmpGobin}\"; `\n    $Env:GO111MODULE = 'off'; `\n    if ($LASTEXITCODE -ne 0) {  `\n      Throw '\"go-winres install failed...\"'; `\n    } `\n  } `\n  `\n  Install-GoWinres"
        }
      },
      "here_docs": []
    },
    {
      "kind": "ENTRYPOINT",
      "entrypoint": {
        "span": {
          "start": 13487,
          "end": 13497
        }
      },
      "arguments": {
        "exec": {
          "span": {
            "start": 13498,
            "end": 13516
          },
          "value": [
            {
              "span": {
                "start": 13500,
                "end": 13514
              },
              "value": "powershell.exe"
            }
          ]
        }
      }
    },
    {
      "kind": "WORKDIR",
      "workdir": {
        "span": {
          "start": 13577,
          "end": 13584
        }
      },
      "arguments": {
        "span": {
          "start": 13585,
          "end": 13623
        },
        "value": "${GOPATH}\\src\\github.com\\docker\\docker"
      }
    },
    {
      "kind": "COPY",
      "copy": {
        "span": {
          "start": 13663,
          "end": 13667
        }
      },
      "options": [],
      "src": [
        {
          "path": {
            "span": {
              "start": 13668,
              "end": 13669
            },
            "value": "."
          }
        }
      ],
      "dest": {
        "span": {
          "start": 13670,
          "end": 13671
        },
        "value": "."
      }
    }
  ]
}